mm = NULL) %>%
select(-pin)
View(dat_long)
names(dat_long)
dat_long <- dat %>%
gather(key = pin, value = value,
-reserve, -set_id, -position, -date, -comments) %>%
separate(pin, into = c('pin', 'pin_number', 'unit'), sep = '_') %>%
spread(key = unit, value = value) %>%
mutate(reading = mm,
mm = NULL) %>%
select(reserve, set_id, date, position, pin_number, reading, code, comments)
View(dat_long)
write.csv('data/intermediate/SOS.csv', row.names = FALSE)
write.csv(dat_long, 'data/intermediate/SOS.csv', row.names = FALSE)
?write.csv
View(dat_long)
?write_csv
write_csv(dat_long, 'data/intermediate/SOS2.csv')
library(tidyverse)
library(lubridate)
library(readxl)
library(tidyxl)
library(unpivotr)
library(janitor)
#############################
# Deal with main data frame
#############################
# I modified a column header in the spreadsheet (Pin7 Code --> Pin 7 Code) because a space was missing and it screwed up the code. Unless otherwise noted, I have not modified the spreadsheet.
path <- 'data/raw_corrected/SOS_mod.xlsx'
# read tabular data
dat <- read_excel(path, sheet = 'RSET data') %>%
clean_names() %>%
filter(is.na(set_id) == FALSE)
dat_long <- dat %>%
gather(key = pin, value = value,
-reserve, -set_id, -position, -date, -comments) %>%
separate(pin, into = c('pin', 'pin_number', 'unit'), sep = '_') %>%
spread(key = unit, value = value) %>%
mutate(reading = mm,
mm = NULL) %>%
select(reserve, set_id, date, position, pin_number, reading, code, comments)
write_csv(dat_long, 'data/intermediate/SOS.csv')
dat_long <- dat %>%
gather(key = pin, value = value,
-reserve, -set_id, -position, -date, -comments) %>%
separate(pin, into = c('pin', 'pin_number', 'unit'), sep = '_') %>%
spread(key = unit, value = value) %>%
mutate(reading = mm,
mm = NULL) %>%
select(reserve, set_id, date, arm_position = position, pin_number, reading, code, comments)
write_csv(dat_long, 'data/intermediate/SOS.csv')
library(tidyverse)
library(lubridate)
library(readxl)
library(tidyxl)
library(unpivotr)
library(janitor)
#############################
# Deal with main data frame
#############################
# I modified a column header in the spreadsheet (Pin7 Code --> Pin 7 Code) because a space was missing and it screwed up the code. Unless otherwise noted, I have not modified the spreadsheet.
path <- 'data/raw_corrected/SOS_mod.xlsx'
# read tabular data
dat <- read_excel(path, sheet = 'RSET data') %>%
clean_names() %>%
filter(is.na(set_id) == FALSE)
dat_long <- dat %>%
gather(key = pin, value = value,
-reserve, -set_id, -position, -date, -comments) %>%
separate(pin, into = c('pin', 'pin_number', 'unit'), sep = '_') %>%
spread(key = unit, value = value) %>%
mutate(pin_height = mm,
mm = NULL) %>%
select(reserve, set_id, date, arm_position = position, pin_number, pin_height, code, comments)
write_csv(dat_long, 'data/intermediate/SOS.csv')
library(tidyverse)
library(lubridate)
library(readxl)
library(tidyxl)
library(unpivotr)
library(janitor)
#############################
# Deal with main data frame
#############################
path <- 'data/raw_original/DEL.xlsx'
# read tabular data
dat <- read_excel(path, sheet = 'SET data') %>%
select(-X__1, -X__2, -X__3, -X__4, -X__5) %>%  #these are to the right of the notes column
clean_names()
# read formats
fill_colors <- xlsx_formats(path)$local$fill$patternFill$fgColor$rgb
# generate a dataframe showing fill colors for each cell
fills <-
xlsx_cells(path, sheets = "SET data") %>%
dplyr::filter(row >= 2) %>% # Omit the header row and name column
mutate(fill_color = fill_colors[local_format_id]) %>%
select(row, col, fill_color) %>%
spread(col, fill_color) %>%
select(-row, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22) %>%
set_names(paste0(colnames(dat), "_fill"))
# find out how many values there are in each column
names <- colnames(fills)
sums <- rep(0, length(names))
for(i in seq_along(colnames(fills))){
col <- fills[,i]
sums[i] <- sum(!is.na(col))
}
fill_summary <- data.frame(names, sums)
# only need to keep fill columns that don't have 0
fills_exist <- fill_summary$names[fill_summary$sums > 0]
fills <- fills[ , as.character(fills_exist)]
# bind it with the data frame
dat_all <- bind_cols(dat, fills)
#############################
#############################
#############################
# Deal with color key
#############################
codes <- read_excel(path, sheet = 'SET data') %>%
select(X__1) %>%
set_names('code') %>%
filter(!is.na(code))
codefills <- xlsx_cells(path, sheets = "SET data") %>%
dplyr::filter(row >= 2) %>% # Omit the header row and name column
mutate(fill_color = fill_colors[local_format_id]) %>%
select(row, col, fill_color) %>%
spread(col, fill_color) %>%
select(11) %>%   # looked in spreadsheet to make sure this is correct column
set_names(paste0(colnames(codes), "_fill")) %>%
filter(!is.na(code_fill))
codes$fill <- codefills$code_fill
#############################
#############################
# get rid of some intermediate objects
rm('codefills', 'col', 'fill_colors', 'fills_exist', 'i', 'names', 'sums')
#############################
# Match fills and codes in main dataframe
#############################
# pin_measurement_mm is typically the column that has color coding
# sometimes set_pin_no does, but that may be resolved - so I'm writing this
# in such a way that the code will run with or without it
# using the if(exists) stuff
dat_coded <- left_join(dat_all, codes, by = c('pin_measurement_mm_fill' = 'fill')) %>%
mutate(pin_code = code,
code = NULL)
if(exists('set_pin_no_fill', dat_coded) == TRUE) {
dat_coded <- left_join(dat_coded, codes, by = c('set_pin_no_fill' = 'fill')) %>%
mutate(pin_code2 = code,
code = NULL)
}
dat_coded <- dat_coded %>%
mutate(code = case_when(
!is.na(pin_measurement_mm_fill) & !is.na(pin_code) ~ pin_code,
!is.na(pin_measurement_mm_fill) & is.na(pin_code) ~ 'other, not in key',
TRUE ~ '0'
)
) %>%
select(-pin_measurement_mm_fill, -pin_code)
if(exists('set_pin_no_fill', dat_coded) == TRUE) {
dat_coded <- dat_coded %>%
mutate(code = case_when(
!is.na(set_pin_no_fill) & !is.na(pin_code2) ~ pin_code2,
!is.na(set_pin_no_fill) & is.na(pin_code2) ~ 'other, not in key',
!is.na(code) & !is.na(pin_code2) ~ paste0(code, pin_code2),
TRUE ~ code
)) %>%
select(-set_pin_no_fill, -pin_code2)
}
# see how many codes are not in key
# hopefully after the original file is looked at, this will be 0
sum(dat_coded$code == 'other, not in key')
names(dat_coded)
# change names to be slightly more consistent
dat_coded <- dat_coded %>%
select(set_id = site_label, date, arm_position = set_arm_position, pin_number = set_pin_no, pin_height = pin_measurement_mm, code, notes, latitude, longitude)
names(dat_coded)
View(dat_coded)
# spit out csv file
write_csv(dat_coded, 'data/intermediate/DEL.csv')
unique(arm_position)
unique(dat_coded$arm_position)
summary(dat_coded$pin_height)
summary(dat_coded$pin_number)
hist(dat_coded$pin_height)
neg_pin_hts <- dat_coded %>% filter(pin_height < 0)
View(neg_pin_hts)
write_csv(neg_pin_hts, 'data/needs_attention/DEL_neg_pin_heights.csv')
library(tidyverse)
path <- 'data/intermediate'
files_to_check <- dir(path)
file_DEL <- paste0(path, 'DEL.csv')
dat <- read_csv(file_DEL)
file_DEL <- paste0(path, '/DEL.csv')
dat <- read_csv(file_DEL)
View(dat)
str(dat)
dat <- read.csv(file_DEL)
# general: what's in here and what does each column look like?
names(dat)
str(dat)
dat <- read_csv(file_DEL)
?read_csv
# general: what's in here and what does each column look like?
names(dat)
ggplot(dat) +
geom_histogram(aes(pin_height)) +
facet_wrap(~set_id, ncol = 2) +
theme_minimal()
ggplot(dat) +
geom_histogram(aes(pin_height)) +
facet_wrap(~set_id, ncol = 2, scales = 'free_y') +
theme_bw()
?geom_histogram
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_wrap(~set_id, ncol = 2, scales = 'free_y') +
theme_bw()
DEL <- paste0(path, '/DEL.csv')
SOS <- paste0(path, '/SOS.csv')
##########################################
file_of_choice <- SOS
dat <- read_csv(file_of_choice)
# general: what's in here and what does each column look like?
names(dat)
str(dat)
unique(set_id)
unique(dat$set_id)
summary(dat$date)
unique(dat$arm_position)
unique(dat$pin_number)
summary(dat$pin_number)
summary(dat$pin_height)
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_wrap(~set_id, ncol = 2, scales = 'free_y') +
theme_bw()
##########################################
file_of_choice <- DEL
dat <- read_csv(file_of_choice)
unique(dat$set_id)
library(tidyverse)
library(lubridate)
library(readxl)
library(tidyxl)
library(unpivotr)
library(janitor)
#############################
# Deal with main data frame
#############################
path <- 'data/raw_original/DEL.xlsx'
# read tabular data
dat <- read_excel(path, sheet = 'SET data') %>%
select(-X__1, -X__2, -X__3, -X__4, -X__5) %>%  #these are to the right of the notes column
clean_names()
# read formats
fill_colors <- xlsx_formats(path)$local$fill$patternFill$fgColor$rgb
# generate a dataframe showing fill colors for each cell
fills <-
xlsx_cells(path, sheets = "SET data") %>%
dplyr::filter(row >= 2) %>% # Omit the header row and name column
mutate(fill_color = fill_colors[local_format_id]) %>%
select(row, col, fill_color) %>%
spread(col, fill_color) %>%
select(-row, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22) %>%
set_names(paste0(colnames(dat), "_fill"))
# find out how many values there are in each column
names <- colnames(fills)
sums <- rep(0, length(names))
for(i in seq_along(colnames(fills))){
col <- fills[,i]
sums[i] <- sum(!is.na(col))
}
fill_summary <- data.frame(names, sums)
# only need to keep fill columns that don't have 0
fills_exist <- fill_summary$names[fill_summary$sums > 0]
fills <- fills[ , as.character(fills_exist)]
# bind it with the data frame
dat_all <- bind_cols(dat, fills)
#############################
#############################
#############################
# Deal with color key
#############################
codes <- read_excel(path, sheet = 'SET data') %>%
select(X__1) %>%
set_names('code') %>%
filter(!is.na(code))
codefills <- xlsx_cells(path, sheets = "SET data") %>%
dplyr::filter(row >= 2) %>% # Omit the header row and name column
mutate(fill_color = fill_colors[local_format_id]) %>%
select(row, col, fill_color) %>%
spread(col, fill_color) %>%
select(11) %>%   # looked in spreadsheet to make sure this is correct column
set_names(paste0(colnames(codes), "_fill")) %>%
filter(!is.na(code_fill))
codes$fill <- codefills$code_fill
#############################
#############################
# get rid of some intermediate objects
rm('codefills', 'col', 'fill_colors', 'fills_exist', 'i', 'names', 'sums')
#############################
# Match fills and codes in main dataframe
#############################
# pin_measurement_mm is typically the column that has color coding
# sometimes set_pin_no does, but that may be resolved - so I'm writing this
# in such a way that the code will run with or without it
# using the if(exists) stuff
dat_coded <- left_join(dat_all, codes, by = c('pin_measurement_mm_fill' = 'fill')) %>%
mutate(pin_code = code,
code = NULL)
if(exists('set_pin_no_fill', dat_coded) == TRUE) {
dat_coded <- left_join(dat_coded, codes, by = c('set_pin_no_fill' = 'fill')) %>%
mutate(pin_code2 = code,
code = NULL)
}
dat_coded <- dat_coded %>%
mutate(code = case_when(
!is.na(pin_measurement_mm_fill) & !is.na(pin_code) ~ pin_code,
!is.na(pin_measurement_mm_fill) & is.na(pin_code) ~ 'other, not in key',
TRUE ~ '0'
)
) %>%
select(-pin_measurement_mm_fill, -pin_code)
if(exists('set_pin_no_fill', dat_coded) == TRUE) {
dat_coded <- dat_coded %>%
mutate(code = case_when(
!is.na(set_pin_no_fill) & !is.na(pin_code2) ~ pin_code2,
!is.na(set_pin_no_fill) & is.na(pin_code2) ~ 'other, not in key',
!is.na(code) & !is.na(pin_code2) ~ paste0(code, pin_code2),
TRUE ~ code
)) %>%
select(-set_pin_no_fill, -pin_code2)
}
# see how many codes are not in key
# hopefully after the original file is looked at, this will be 0
sum(dat_coded$code == 'other, not in key')
# change names to be slightly more consistent
# also get rid of any extra rows
dat_coded <- dat_coded %>%
select(set_id = site_label, date, arm_position = set_arm_position, pin_number = set_pin_no, pin_height = pin_measurement_mm, code, notes, latitude, longitude) %>%
filter(is.na(set_id) == FALSE)
# spit out csv file
write_csv(dat_coded, 'data/intermediate/DEL.csv')
# neg_pin_hts <- dat_coded %>% filter(pin_height < 0)
# write_csv(neg_pin_hts, 'data/needs_attention/DEL_neg_pin_heights.csv')
library(tidyverse)
path <- 'data/intermediate'
files_to_check <- dir(path)
DEL <- paste0(path, '/DEL.csv')
SOS <- paste0(path, '/SOS.csv')
##########################################
file_of_choice <- DEL
##########################################
dat <- read_csv(file_of_choice)
# general: what's in here and what does each column look like?
names(dat)
str(dat)
# check to make sure everything is within boundaries
# look for duplication in names; pin numbers that are not 1-9; negative pin heights
unique(dat$set_id)
summary(dat$date)
unique(dat$arm_position)
unique(dat$pin_number)
summary(dat$pin_number)
summary(dat$pin_height)
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_wrap(~set_id, ncol = 2, scales = 'free_y') +
theme_bw()
path <- 'data/intermediate'
SOS <- paste0(path, '/SOS.csv')
##########################################
file_of_choice <- SOS
dat <- read_csv(file_of_choice)
# general: what's in here and what does each column look like?
names(dat)
str(dat)
# check to make sure everything is within boundaries
# look for duplication in names; pin numbers that are not 1-9; negative pin heights
unique(dat$set_id)
summary(dat$date)
unique(dat$arm_position)
unique(dat$pin_number)
summary(dat$pin_number)
summary(dat$pin_height)
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_wrap(~set_id, ncol = 2, scales = 'free_y') +
theme_bw()
# produce a data frame of negative pin heights
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
# if there are negative pin heights, show them
if(sum(dat$pin_height < 0) > 1) {
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
}
# if there are negative pin heights, show them
if(sum(dat$pin_height < 0) > 1) {
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
} else {print("all pin heights are >0")}
# check for negative pin heights
if(sum(dat$pin_height < 0) > 1) {
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
} else {print("all pin heights are >0")}
# check for negative pin heights
if(sum(dat$pin_height < 0) > 1) {
print(paste0("there are ", sum(dat$pin_height < 0), " pin heights <0. They are:"))
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
} else {print("all pin heights are >0")}
##########################################
file_of_choice <- DEL
dat <- read_csv(file_of_choice)
# general: what's in here and what does each column look like?
names(dat)
str(dat)
# check to make sure everything is within boundaries
# look for duplication in names; pin numbers that are not 1-9; negative pin heights
unique(dat$set_id)
summary(dat$date)
unique(dat$arm_position)
unique(dat$pin_number)
summary(dat$pin_number)
summary(dat$pin_height)
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_wrap(~set_id, ncol = 2, scales = 'free_y') +
theme_bw()
# check for negative pin heights
if(sum(dat$pin_height < 0) > 1) {
print(paste0("there are ", sum(dat$pin_height < 0), " pin heights <0. They are:"))
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
} else {print("all pin heights are >0")}
sum(dat$pin_height < 0) > 1
sum(dat$pin_height < 0)
summary(dat$pin_height)
dat$pin_height < 0
sum(dat$pin_height < 0)
sum(dat$pin_height < 0, na.rm = TRUE)
# check for negative pin heights
if(sum(dat$pin_height < 0, na.rm = TRUE) > 1) {
print(paste0("there are ", sum(dat$pin_height < 0), " pin heights <0. They are:"))
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
} else {print("all pin heights are >0")}
# check for negative pin heights
if(sum(dat$pin_height < 0, na.rm = TRUE) > 1) {
print(paste0("There are ", sum(dat$pin_height < 0), " pin heights <0. They are:"))
neg_pin_hts <- dat %>% filter(pin_height < 0)
neg_pin_hts
print("View 'neg_pin_hts' data frame to see more.")
} else {print("all pin heights are >0")}
head(neg_pin_hts, 10)
View(neg_pin_hts)
library(tidyverse)
path <- 'data/intermediate'
files_to_check <- dir(path)
DEL <- paste0(path, '/DEL.csv')
SOS <- paste0(path, '/SOS.csv')
##########################################
file_of_choice <- DEL
##########################################
dat <- read_csv(file_of_choice)
# general: what's in here and what does each column look like?
names(dat)
str(dat)
# check to make sure everything is within boundaries
# look for duplication in names; pin numbers that are not 1-9; negative pin heights
unique(dat$set_id)
summary(dat$date)
unique(dat$arm_position)
unique(dat$pin_number)
summary(dat$pin_number)
summary(dat$pin_height)
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_wrap(~set_id, ncol = 2, scales = 'free_y') +
theme_bw()
# check for negative pin heights
if(sum(dat$pin_height < 0, na.rm = TRUE) > 1) {
print(paste0("There are ", sum(dat$pin_height < 0), " pin heights <0. The first 10 are below. To see more, enter the command View(neg_pin_hts)."))
neg_pin_hts <- dat %>% filter(pin_height < 0)
head(neg_pin_hts, 10)
} else {print("all pin heights are >0")}
View(neg_pin_hts)
# check for negative pin heights
if(sum(dat$pin_height < 0, na.rm = TRUE) > 1) {
print(paste0("There are ", sum(dat$pin_height < 0), " pin heights <0. The first 10 are below. \nTo see more, enter the command View(neg_pin_hts)."))
neg_pin_hts <- dat %>% filter(pin_height < 0)
head(neg_pin_hts, 10)
} else {print("all pin heights are >0")}
?clean_names
print(paste0("There are ", sum(dat$pin_height < 0, na.rm = TRUE), " pin heights <0. The first 10 are below. To see more, enter the command View(neg_pin_hts)."))
# check for negative pin heights
if(sum(dat$pin_height < 0, na.rm = TRUE) > 1) {
print(paste0("There are ", sum(dat$pin_height < 0, na.rm = TRUE), " pin heights <0. The first 10 are below. To see more, enter the command View(neg_pin_hts)."))
neg_pin_hts <- dat %>% filter(pin_height < 0)
head(neg_pin_hts, 10)
} else {print("all pin heights are >0")}
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_grid(arm_position~set_id, scales = 'free_y') +
theme_bw()
ggplot(dat) +
geom_histogram(aes(pin_height), fill = 'navyblue', bins = 50) +
facet_grid(set_id ~ arm_position, scales = 'free_y') +
theme_bw()
